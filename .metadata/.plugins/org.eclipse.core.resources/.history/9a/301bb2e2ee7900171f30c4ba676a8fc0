import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.concurrent.LinkedBlockingQueue;

import com.google.gson.JsonObject;

public class NsUlDecoder implements Runnable {
	LinkedBlockingQueue<NsUlMsg> msgqueue;
	LinkedBlockingQueue dlqueue;
	DBManager           dbm;

	public NsUlDecoder(LinkedBlockingQueue dlqueue, DBManager db) {
		// TODO Auto-generated constructor stub
		msgqueue = new LinkedBlockingQueue();
		dbm      = db;
	}

	public void run() {
		// TODO Auto-generated method stub
		while(true) {
			if (msgqueue.isEmpty()) {
				continue;
			}

			NsUlMsg msg = (NsUlMsg) msgqueue.poll();

			switch (msg.type) {
			case 1: {
				if (msg.jmsg.has("MoteULData")) {
					JsonObject data = msg.jmsg.getAsJsonObject("MoteULData");
					
					long   DevEUI  = data.get("DevEUI").getAsLong();
					long   GwID    = data.get("GwID").getAsLong();
					long   DevAddr = data.get("DevAddr").getAsLong();
					long   FPort   = data.get("FPort").getAsLong();
					long   FcntDown= data.get("FcntDown").getAsLong();
					long   FcntUp  = data.get("FcntUp").getAsLong();
					long   ULFreq  = data.get("ULFreq").getAsLong();
					long   Tmst    = data.get("Tmst").getAsLong();
					long   RSSI    = data.get("RSSI").getAsLong();
					long   SNR     = data.get("SNR").getAsLong();
					long   DataLen = data.get("DataLen").getAsLong();
					
					String DataRate = data.get("DataRate").getAsString();
					String CodeRate = data.get("CodeRate").getAsString();
					String RecvTime = data.get("RecvTime").getAsString();
					String AppData  = data.get("AppData").getAsString();
					
					String sqlstate = String.format("select count(*) as RowCount from devs where DevEUI=%d", DevEUI);
					ResultSet ret = dbm.query(sqlstate);
					
					int count = 0;
					try {
						ret.next();
						count = ret.getInt("RowCount");
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					if (count>=50) {
						count = 50;
						sqlstate = String.format("delete * from devs where Count=1 and DevEUI=%d", DevEUI);
						dbm.query(sqlstate);
						sqlstate = String.format("update devs set Count=Count-1 where Count>1 and DevEUI=%d", DevEUI);
						dbm.query(sqlstate);
					}
					else {
						count++;
					}
					
					sqlstate = String.format("insert into devs values (%d, %d, %d, %d, %d, "
							+ "%d, \"%s\", \"%s\", %d, \"%s\", %d, %d, %f, %d, \"%s\", %d, %d);", DevEUI, 
							GwID, DevAddr, FPort, FcntDown, FcntUp, DataRate, CodeRate, ULFreq, RecvTime,
						    Tmst, RSSI, SNR, DataLen, AppData, msg.id, count);
					dbm.query(sqlstate);
				}
				break;
			}
			case 2: {
				
				
				break;
			}
			case 3: {
				if (msg.jmsg.has("GWDemoStat")) {
					JsonObject data = msg.jmsg.getAsJsonObject("GWDemoStat");
					
					long   GwID = data.get("GwID").getAsLong();
					long   Alti = data.get("Alti").getAsLong();
					long   RxNb = data.get("RxNb").getAsLong();
					long   RxOK = data.get("RxOK").getAsLong();
					long   RxFw = data.get("RxFw").getAsLong();
					long   AckR = data.get("AckR").getAsLong();
					long   DwNb = data.get("DwNb").getAsLong();
					long   TxNb = data.get("TxNb").getAsLong();
					
					float  Lati = data.get("Lati").getAsFloat();
					float  Long = data.get("Long").getAsFloat();
					
					String Time = data.get("Time").getAsString();

					String sqlstate = String.format("select count(*) as RowCount from gws where GwID=%d", GwID);
					ResultSet ret = dbm.query(sqlstate);
					int count = 0;
					try {
						ret.next();
						count = ret.getInt("RowCount");
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					if (count>0) {
						sqlstate = String.format("delete * from gws where GwID=%d", GwID);
						dbm.query(sqlstate);
					}

					sqlstate = String.format("insert into devs values (%d, \"%s\", %f, %f, %d, %d, %d, %d, "
							+ "%d, %d, %d);", GwID, Time, Lati, Long, Alti, RxNb, RxOK, RxFw, AckR, DwNb, 
							TxNb);
					dbm.query(sqlstate);
				}
				
				break;
			}
			case 4: {
				if (msg.jmsg.has("LinkUpdate")) {
					JsonObject data = msg.jmsg.getAsJsonObject("LinkUpdate");
					
					long   NwkLink = data.get("NwkLink").getAsLong();

					
					
				}
				
				break;
			}
			case 6: {
				if (msg.jmsg.has("MoteInfoReq")) {
					JsonObject data = msg.jmsg.getAsJsonObject("MoteInfoReq");
					
					long   DevEUI = data.get("DevEUI").getAsLong();

					NsDlMsg dlmsg = new NsDlMsg();
					
					dlmsg.id      = msg.id;
					dlmsg.version = msg.version;
					dlmsg.type    = 7;
					
					JsonObject jmsg  = new JsonObject();
					JsonObject jdata = new JsonObject();
				}
				
				break;
			}
			case 8: {
				if (msg.jmsg.has("GwInfoReq")) {
					JsonObject data = msg.jmsg.getAsJsonObject("GwInfoReq");
					
					long   GwID = data.get("GwID").getAsLong();


					
				}
				
				break;
			}
			case 11: {
				if (msg.jmsg.has("MoteInfoPushAck")) {
					JsonObject data = msg.jmsg.getAsJsonObject("MoteInfoPushAck");
					
					long   DevEUI = data.get("DevEUI").getAsLong();
					long   ACK    = data.get("ACK").getAsLong();


					
				}
				
				break;
			}
			case 13: {
				if (msg.jmsg.has("GwInfoPushAck")) {
					JsonObject data = msg.jmsg.getAsJsonObject("GwInfoPushAck");
					
					long   GwID = data.get("GwID").getAsLong();
					long   ACK  = data.get("ACK").getAsLong();

					
					
				}
				
				break;
			}
			}
		}
	}
}
